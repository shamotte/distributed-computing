// Programowanie Rozproszone - Projekt
// 8. Głosowanie staruszków.

// 156080, 156022

// Kwestie znaczników czasowych i roztrzygania konfliktów względem czasu odbywają się z wykorzystaniem licznika lamporta
// Jego implementacji nie opisujemy w poniższym pseudokodzie dla czytelności samej logiki stanów


// Stany
state IDLE, TABLE_SEEK, TABLE_WAIT, TABLE_PLAY


// Sygnały
// Dodatkowo, każdy sygnał posiada pid (player id) oraz lamport_counter
signal TABLE_REQ<tid>,			// prośba o dostanie się do stołu tid			| broadcast
	TABLE_FREE,					// zgoda na zapytanie o stół					| odpowiedź
	TABLE_OCCUPIED,				// odmowa na zapytanie o stół					| odpowiedź
	GAME_BGN<tid,vote>			// dwukierunkowy sygnał gotowości do gry   		| broadcast / odpowiedź
	GAME_END_REQ, 				// prośba o zakończenie gry przy stole			| wiadomość
	GAME_END_ACK				// zgoda na zapytanie o koniec gry				| odpowiedź
	GAME_OVER<tid>				// gra się zakończyła na danym stole			| broadcast


// Stałe wynikające z zadania
const PLAYER_NUM,				// liczba graczy
	TABLE_NUM,					// liczba stołów
	PLAYERS_NEEDED				// gracze potrzebni do gry


// Stan "bazowy", rzeczy wykonywane zawsze, niezależnie od stanu
state BASE {

	table_id: int							// trzymana informacja w procesie o trzymanym stole
	table_activity[TABLE_NUM]: array[int]	// liczba osób, które pytają o stoły, aby oszacować najlepszy wybór

	signal {
		case TABLE_REQ<tid>:
			table_activity[tid]++

		case GAME_OVER<tid>:
			table_activity[tid] = 0
	}

	// znajdź stół który jest jak najbliższy wypełnienia
	// ale nie jest pełny
	choose_table(my_position : int) {
		tid: int := -1
		max: int := -inf

		// Przechodź przez stoły, preferując te bardzij wypełnione
		for t in table_activity (ordered by descending value):
			// stół jest pełny
			if table_activity[t] >= PLAYERS_NEEDED:
				continue

			// odejmujemy wolne pozycje od naszej pozycji
			// (ilość naków przy konflikcie o miejsce)
			// w celu przewidzenia naszego miejsca
			if table_activity[t] >= 0:
				my_position -= max(0,4-table_activity[t])

				// przeskoczyliśmy o tyle miejsc, ile dostaliśmy naków
				// i stół nie jest pełny
				// to miejsce powinno być dostępne bez większych problemów
				if my_position <= 0:
					return t;

		return -1
	}

}

state IDLE {

	// czy czekać na sygnał zakończenia gry
	// ustawiany przy przejściu do stanu, kiedy nie ma wolnych stołów
	wait_gameover := false

	signal {
		// jak ktoś chce jakiś stół to ok, nie ma problemu, to nas nie dotyczy
		case TABLE_REQ<tid>:
			send(TABLE_FREE)
	}

	logic {
		// czekaj (jeśli trzeba) na zakończenie gry
		if wait_gameover:
			await(GAME_OVER<tid>)

		// czekaj losową ilość czasu i zacznij szukać stołu
		wait(random)
		goto(TABLE_SEEK)
	}
}


state TABLE_SEEK {

	answers := 0			// ilość zebranych odpowiedzi na dojście do stołu
	acks := 0				// ilość zebranych niezgód na dojście do stołu
	naks := 0				// ilość zebranych zgód na dojście do stołu

	target_table := null	// stół, do którego próbujemy się dostać

	signal {
		case TABLE_FREE:
			// zgoda
			answers++
			acks++

		case TABLE_OCCUPIED:
			// brak zgody
			answers++
			naks++

		case TABLE_REQ<tid>:
			// ktoś ubiega się o inny stół więc akceptujemy 
			if tid != target_table:
				send(TABLE_FREE)

			// dany proces ma większy priorytet przed nami, więc go wpuszczamy
			// ewentualnie w przypadku remisu decydujemy za pomocą id
			else if (tid.lamport_counter, pid) < (lamport_counter, pid):
				send(TABLE_FREE)
			else:
				send(TABLE_OCCUPIED)
	}

	logic {
		// wybierz stół uwzględniając kto już gdzieś siedzi
		table_id := target_table ?? chose_table(0)

		// nie ma wolnego stołu, czekaj dalej
		if table_id == -1:
			goto(IDLE{wait_gameover := true})

		// ogłoś globalnie prośbę o stół
		broadcast(TABLE_REQ<table_id>)

		// czekaj na wszystkie odpowiedzi
		wait until (answers == PLAYERS_NUM)

		if naks < 4:
			// są mniej niż 4 niezgody, jest miejsce przy stole
			goto(TABLE_WAIT)
		else:
			// nie ma miejsca przy danym stole
			// wyestymuj odpowiedni dla siebie stół i spróbuj do niego dołączyć
			next_table := choose_table(naks)
			goto(TABLE_SEEK{target_table := next_table})
	}
}


state TABLE_WAIT {

	ready := 0				// gracze gotowi do gry
	votes := [0,0,...]		// liczba głosów na dane gry
	players := {}			// zbiór znanych graczy

	signal {
		case TABLE_REQ<tid>:
			if table_id != tid:
				// ktoś pyta o inny stół, nas nie obchodzi
				send(TABLE_FREE)
			else:
				// ktoś chce wejść, nie ma miejsca, nie ok
				send(TABLE_OCCUPIED)

		case GAME_BGN<tid,vote>:
			if signal.tid == table_id:
				if signal.pid not in players:
					send(GAME_BGN<tid,vote>)	// nowo poznany gracz, przekaż gotowość+głos
					players += signal.tid		// gracz poznany
					votes[vote]++				// Odnotuj głos na grę
					ready++						// zwiększ licznik gotowości
	}

	logic {
		vote := random(games)

		// zgłoś gotowość+głos osobom już przy stole
		broadcast(GAME_BGN<table_id,vote>)

		// czekaj aż wszyscy gotowi
		wait until (ready == PLAYERS_NEEDED)

		// na bazie głosów (lub id) wybierz zwycięzcę i graj
		winning_vote := max(vote,id)
		goto(TABLE_PLAY)
	}
}

state TABLE_PLAY {

	// licznik graczy gotowych do zakończenia gry
	game_over := 0

	signal {
		case TABLE_REQ<tid>:
			if table_id != signal.tid:
				// ktoś pyta o inny stół, nas nie obchodzi
				send(TABLE_FREE)
			else:
				// ktoś chce wejść, gra trwa więc nie ok
				send(TABLE_OCCUPIED)

		// ktoś pyta się o zakończenie, odpowiedz że tak
		case GAME_END_REQ:
			send(GAME_END_ACK)

		// ktoś inny jest też gotowy zakończyć grę, zwiększ licznik
		case GAME_END_ACK:
			game_over++
	}

	logic {
		// czas zanim gracz chce zakończyć grę
		wait(random)

		// nadaj chęć zakończenia gry graczom przy stole
		for player in players:
			player.send(GAME_END_REQ)

		// czekaj aż wszyscy będą gotowi
		wait until (game_over == PLAYERS_NEEDED)

		// opuść stół
		table_id := null
		goto(IDLE)

		//tylko jeden gracz przy stole wysyła broadcast
		if id == min(players.id):
			broadcast(GAME_OVER)
	}
}
